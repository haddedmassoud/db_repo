name: Build, Push Docker Container, and Deploy to OpenShift

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest .

      # Step 4: Push the Docker image to GitHub Container Registry
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest

      # Step 5: Install OpenShift CLI
      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/

      # Step 6: Log in to OpenShift
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}

      # Step 7: Update the image in Deployment YAML
      - name: Update image in Deployment YAML
        run: |
          sed -i "s|your-registry/your-postgres-image:tag|ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest|" ./manifests/postgres-deployment.yaml

      # Step 8: Apply Kubernetes manifests in OpenShift
      - name: Apply Kubernetes manifests
        run: |
          oc apply -f ./manifests/

      # Step 9: Verify Deployment (Optional)
      - name: Verify Deployment
        run: |
          oc rollout status deployment/postgresql
